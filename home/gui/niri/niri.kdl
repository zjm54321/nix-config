// 此配置使用 KDL 格式: https://kdl.dev
// "/-" 用于注释掉下面的节点。
// 查看 wiki 获取完整的配置说明:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Introduction

// 启动配置
// 添加类似这样的行在启动时生成进程。
// 请注意，将 niri 作为会话运行支持 xdg-desktop-autostart，
// 这可能更方便使用。
// 有关更多生成示例，请参见下面的绑定部分。
spawn-at-startup "systemctl" "--user" "restart" "waybar.service"
spawn-at-startup "fcitx5"
// 使用 xwayland-satellite 用作 Xorg 兼容层。
spawn-at-startup "xwayland-satellite"
environment {
    DISPLAY ":0"
    //ELECTRON_OZONE_PLATFORM_HINT "auto"
    //NIXOS_OZONE_WL "1"
}
spawn-at-startup "wezterm"

// 输入设备配置。
// 在 wiki 上查找完整的选项列表:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Input
input {
    keyboard {
        numlock    // 启动时启用数字键盘
    }

    touchpad {
        // off
        tap
        // dwt
        // dwtp
        // drag false
        // drag-lock
        natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "two-finger"
        // disabled-on-external-mouse
    }

    mouse {
        // off
        // natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "no-scroll"
    }

    // 取消注释此行以使鼠标自动移动到新聚焦窗口的中心。
    // warp-mouse-to-focus

    // 当鼠标移入时自动聚焦窗口和输出。
    // 设置 max-scroll-amount="0%" 使其仅在窗口已完全显示在屏幕上时工作。
    // focus-follows-mouse max-scroll-amount="0%"
}

// 您可以通过输出名称配置输出，可以通过在 niri 实例内运行 `niri msg outputs` 找到输出名称。
// 内置笔记本显示器通常称为 "eDP-1"。
// 在 wiki 上查找更多信息:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Outputs
// 记住通过删除 "/-" 来取消注释节点！
/-output "eDP-1" {
    // 取消注释此行以禁用此输出。
    // off

    // 输出的分辨率和可选的刷新率。
    // 格式为 "<宽度>x<高度>" 或 "<宽度>x<高度>@<刷新率>"。
    // 如果省略刷新率，niri 将为该分辨率选择最高刷新率。
    // 如果完全省略模式或模式无效，niri 将自动选择一个。
    // 在 niri 实例内运行 `niri msg outputs` 列出所有输出及其模式。
    mode "1920x1080@120.030"

    // 您可以使用整数或小数缩放，例如使用 1.5 表示 150% 缩放。
    scale 2

    // Transform 允许逆时针旋转输出，有效值为:
    // normal, 90, 180, 270, flipped, flipped-90, flipped-180 和 flipped-270。
    transform "normal"

    // 输出在全局坐标空间中的位置。
    // 这影响方向性监视器操作如 "focus-monitor-left" 和光标移动。
    // 光标只能在直接相邻的输出之间移动。
    // 输出缩放和旋转必须在定位时考虑在内:
    // 输出以逻辑像素或缩放像素为单位。
    // 例如，一个缩放为 2.0 的 3840×2160 输出将具有 1920×1080 的逻辑大小，
    // 所以要将另一个输出直接放在其右侧，将其 x 设置为 1920。
    // 如果位置未设置或导致重叠，输出将自动放置。
    position x=1280 y=0
}

// 影响窗口定位和大小的设置。
// 在 wiki 上查找更多信息:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Layout
layout {
    // 设置窗口周围的间隙，单位为逻辑像素。
    gaps 12

    // 何时在更改焦点时居中列，选项有:
    // - "never"，默认行为，聚焦屏幕外的列将保持在屏幕的左侧或右侧边缘。
    // - "always"，聚焦的列将始终居中。
    // - "on-overflow"，如果聚焦的列与先前聚焦的列不能同时显示，则居中该列。
    center-focused-column "on-overflow"

    // 您可以自定义 "switch-preset-column-width" (Mod+R) 切换的宽度。
    preset-column-widths {
        // Proportion 将宽度设置为输出宽度的分数，考虑间隙。
        // 例如，您可以在输出上完美放置四个大小为 "proportion 0.25" 的窗口。
        // 默认预设宽度为输出的 1/3、1/2 和 2/3。
        proportion 0.33333
        proportion 0.5
        proportion 0.66667

        // Fixed 精确设置逻辑像素的宽度。
        // fixed 1920
    }

    // 您也可以自定义 "switch-preset-window-height" (Mod+Shift+R) 切换的高度。
    // preset-window-heights { }

    // 您可以更改新窗口的默认宽度。
    default-column-width { proportion 0.5; }
    // 如果留空括号，窗口本身将决定其初始宽度。
    // default-column-width {}

    // 默认情况下，焦点环和边框渲染为窗口后面的实心背景矩形
    // 默认情况下，焦点环和边框渲染为窗口后面的实心背景矩形
    // 也就是说，它们将通过半透明窗口显示出来。
    // 这是因为使用客户端装饰的窗口可以有任意形状。
    //
    // 如果您不喜欢这样，您应该取消注释下面的 `prefer-no-csd`。
    // Niri 将在同意省略其客户端装饰的窗口*周围*绘制焦点环和边框。
    //
    // 或者，您可以使用名为 `draw-border-with-background` 的窗口规则覆盖它。

    // 您可以更改焦点环的外观。
    focus-ring {
        // 取消注释此行以禁用焦点环。
        //off

        // 环向窗口外延伸多少逻辑像素。
        width 2

        // 颜色可以通过多种方式设置:
        // - CSS 命名颜色: "red"
        // - RGB 十六进制: "#rgb", "#rgba", "#rrggbb", "#rrggbbaa"  
        // - CSS 样式表示法: "rgb(255, 127, 0)", rgba(), hsl() 等等。

        // 活动监视器上环的颜色。
        active-color "#7fc8ff"

        // 非活动监视器上环的颜色。
        inactive-color "#505050"

        // 您也可以使用渐变。它们优先于纯色。
        // 渐变的渲染与 CSS linear-gradient(angle, from, to) 相同。
        // 角度与 linear-gradient 中的相同，是可选的，
        // 默认为 180（从上到下的渐变）。
        // 您可以使用网上的任何 CSS linear-gradient 工具来设置这些。
        // 也支持更改色彩空间，更多信息请查看 wiki。
        //
        // active-gradient from="#80c8ff" to="#bbddff" angle=45

        // 您也可以相对于工作区的整个视图为渐变着色，
        // 而不是仅相对于窗口本身。
        // 要做到这一点，设置 relative-to="workspace-view"。
        //
        // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
    }

    // Struts 缩小窗口占用的区域，类似于层级面板。
    // 您可以将它们视为一种外部间隙。它们以逻辑像素设置。
    // 左侧和右侧 struts 将使侧面的下一个窗口始终可见。
    // 顶部和底部 struts 将在层级面板和常规间隙占用的区域之外简单地添加外部间隙。
    struts {
         //left 30
         //right 30
         //top 5
         //bottom 5
    }
}


binds {
    // 按键由用 + 号分隔的修饰符组成，最后跟一个 XKB 按键名称。
    // 要查找特定按键的 XKB 名称，您可以使用像 wev 这样的程序。
    //
    // "Mod" 是一个特殊修饰符，在 TTY 上运行时等于 Super，
    // 在作为 winit 窗口运行时等于 Alt。
    //
    // 您可以在此绑定的大多数操作也可以通过 `niri msg action do-something` 以编程方式调用。

    // Mod-Shift-/，通常与 Mod-? 相同，
    // 显示重要热键列表。
    Mod+Shift+Slash { show-hotkey-overlay; }

    // 运行程序的建议绑定: 终端、应用启动器、屏幕锁定。
    Mod+Return hotkey-overlay-title="打开终端: wezterm" { spawn "wezterm"; }
    Mod+space hotkey-overlay-title="运行应用程序: anyrun" { spawn "anyrun"; }
    Mod+Alt+L hotkey-overlay-title="锁定屏幕: hyprlock" { spawn "hyprlock"; }

    // 您也可以使用 shell。如果您需要管道、多个命令等，请执行此操作。
    // 注意: 整个命令最后作为单个参数。
    // Mod+T { spawn "bash" "-c" "notify-send hello && exec alacritty"; }

    // PipeWire 和 WirePlumber 的示例音量键映射。
    // allow-when-locked=true 属性使它们即使在会话锁定时也能工作。
    XF86AudioRaiseVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1+"; }
    XF86AudioLowerVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1-"; }
    XF86AudioMute        allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
    XF86AudioMicMute     allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"; }
    
    // 背光键映射。
    XF86MonBrightnessUp   allow-when-locked=true { spawn "brightnessctl" "set" "+5%"; }
    XF86MonBrightnessDown allow-when-locked=true { spawn "brightnessctl" "set" "5%-"; }

    // 打开/关闭概览: 工作区和窗口的缩小视图。
    // 您也可以将鼠标移到左上角热区，
    // 或在触摸板上做四指向上滑动。
    Mod+O repeat=false { toggle-overview; }

    Mod+Q { close-window; }

    Mod+Left  { focus-column-left; }
    Mod+Down  { focus-window-down; }
    Mod+Up    { focus-window-up; }
    Mod+Right { focus-column-right; }
    Mod+H     { focus-column-left; }
    Mod+J     { focus-window-down; }
    Mod+K     { focus-window-up; }
    Mod+L     { focus-column-right; }

    Mod+Ctrl+Left  { move-column-left; }
    Mod+Ctrl+Down  { move-window-down; }
    Mod+Ctrl+Up    { move-window-up; }
    Mod+Ctrl+Right { move-column-right; }
    Mod+Ctrl+H     { move-column-left; }
    Mod+Ctrl+J     { move-window-down; }
    Mod+Ctrl+K     { move-window-up; }
    Mod+Ctrl+L     { move-column-right; }

    // 到达列中第一个或最后一个窗口时跨工作区移动的替代命令。
    // Mod+J     { focus-window-or-workspace-down; }
    // Mod+K     { focus-window-or-workspace-up; }
    // Mod+Ctrl+J     { move-window-down-or-to-workspace-down; }
    // Mod+Ctrl+K     { move-window-up-or-to-workspace-up; }

    Mod+Home { focus-column-first; }
    Mod+End  { focus-column-last; }
    Mod+Ctrl+Home { move-column-to-first; }
    Mod+Ctrl+End  { move-column-to-last; }

    Mod+Shift+Left  { focus-monitor-left; }
    Mod+Shift+Down  { focus-monitor-down; }
    Mod+Shift+Up    { focus-monitor-up; }
    Mod+Shift+Right { focus-monitor-right; }
    Mod+Shift+H     { focus-monitor-left; }
    Mod+Shift+J     { focus-monitor-down; }
    Mod+Shift+K     { focus-monitor-up; }
    Mod+Shift+L     { focus-monitor-right; }

    Mod+Shift+Ctrl+Left  { move-column-to-monitor-left; }
    Mod+Shift+Ctrl+Down  { move-column-to-monitor-down; }
    Mod+Shift+Ctrl+Up    { move-column-to-monitor-up; }
    Mod+Shift+Ctrl+Right { move-column-to-monitor-right; }
    Mod+Shift+Ctrl+H     { move-column-to-monitor-left; }
    Mod+Shift+Ctrl+J     { move-column-to-monitor-down; }
    Mod+Shift+Ctrl+K     { move-column-to-monitor-up; }
    Mod+Shift+Ctrl+L     { move-column-to-monitor-right; }

    // 或者，有命令只移动单个窗口:
    // Mod+Shift+Ctrl+Left  { move-window-to-monitor-left; }
    // ...

    // 您也可以将整个工作区移动到另一个监视器:
    // Mod+Shift+Ctrl+Left  { move-workspace-to-monitor-left; }
    // ...

    Mod+Page_Down      { focus-workspace-down; }
    Mod+Page_Up        { focus-workspace-up; }
    Mod+U              { focus-workspace-down; }
    Mod+I              { focus-workspace-up; }
    Mod+Ctrl+Page_Down { move-column-to-workspace-down; }
    Mod+Ctrl+Page_Up   { move-column-to-workspace-up; }
    Mod+Ctrl+U         { move-column-to-workspace-down; }
    Mod+Ctrl+I         { move-column-to-workspace-up; }

    // 或者，有命令只移动单个窗口:
    // Mod+Ctrl+Page_Down { move-window-to-workspace-down; }
    // ...

    Mod+Shift+Page_Down { move-workspace-down; }
    Mod+Shift+Page_Up   { move-workspace-up; }
    Mod+Shift+U         { move-workspace-down; }
    Mod+Shift+I         { move-workspace-up; }

    // 您可以使用以下语法绑定鼠标滚轮滚动单位。
    // 这些绑定将根据 natural-scroll 设置改变方向。
    //
    // 为了避免在工作区间滚动得太快，您可以使用 cooldown-ms 属性。
    // 绑定将被限制为此值的速率。
    // 您可以在任何绑定上设置冷却时间，但对滚轮最有用。
    Mod+WheelScrollDown      cooldown-ms=150 { focus-workspace-down; }
    Mod+WheelScrollUp        cooldown-ms=150 { focus-workspace-up; }
    Mod+Ctrl+WheelScrollDown cooldown-ms=150 { move-column-to-workspace-down; }
    Mod+Ctrl+WheelScrollUp   cooldown-ms=150 { move-column-to-workspace-up; }

    Mod+WheelScrollRight      { focus-column-right; }
    Mod+WheelScrollLeft       { focus-column-left; }
    Mod+Ctrl+WheelScrollRight { move-column-right; }
    Mod+Ctrl+WheelScrollLeft  { move-column-left; }

    // 通常在应用程序中向上和向下滚动与 Shift 组合会导致水平滚动；
    // 这些绑定复制了该行为。
    Mod+Shift+WheelScrollDown      { focus-column-right; }
    Mod+Shift+WheelScrollUp        { focus-column-left; }
    Mod+Ctrl+Shift+WheelScrollDown { move-column-right; }
    Mod+Ctrl+Shift+WheelScrollUp   { move-column-left; }

    // 类似地，您可以绑定触摸板滚动"单位"。
    // 触摸板滚动是连续的，因此对于这些绑定，它被分割为离散间隔。
    // 这些绑定也受到触摸板的 natural-scroll 影响，因此这些示例绑定是"反转的"，
    // 因为我们默认为触摸板启用了 natural-scroll。
    // Mod+TouchpadScrollDown { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.02+"; }
    // Mod+TouchpadScrollUp   { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.02-"; }

    // 您可以通过索引引用工作区。但是，请记住 niri 是一个动态工作区系统，
    // 因此这些命令有点"尽力而为"。尝试引用比当前工作区数量大的工作区索引
    // 将改为引用最底部的（空）工作区。
    //
    // 例如，有 2 个工作区 + 1 个空的，索引 3、4、5 等等都将引用第 3 个工作区。
    Mod+1 { focus-workspace 1; }
    Mod+2 { focus-workspace 2; }
    Mod+3 { focus-workspace 3; }
    Mod+4 { focus-workspace 4; }
    Mod+5 { focus-workspace 5; }
    Mod+6 { focus-workspace 6; }
    Mod+7 { focus-workspace 7; }
    Mod+8 { focus-workspace 8; }
    Mod+9 { focus-workspace 9; }
    Mod+Ctrl+1 { move-column-to-workspace 1; }
    Mod+Ctrl+2 { move-column-to-workspace 2; }
    Mod+Ctrl+3 { move-column-to-workspace 3; }
    Mod+Ctrl+4 { move-column-to-workspace 4; }
    Mod+Ctrl+5 { move-column-to-workspace 5; }
    Mod+Ctrl+6 { move-column-to-workspace 6; }
    Mod+Ctrl+7 { move-column-to-workspace 7; }
    Mod+Ctrl+8 { move-column-to-workspace 8; }
    Mod+Ctrl+9 { move-column-to-workspace 9; }

    // 或者，有命令只移动单个窗口:
    // Mod+Ctrl+1 { move-window-to-workspace 1; }

    // 在当前和之前的工作区之间切换焦点。
    // Mod+Tab { focus-workspace-previous; }

    // 以下绑定将聚焦的窗口移入和移出列。
    // 如果窗口是单独的，它们将被消费到侧面附近的列中。
    // 如果窗口已经在列中，它们将被排出。
    Mod+BracketLeft  { consume-or-expel-window-left; }
    Mod+BracketRight { consume-or-expel-window-right; }

    // 将右侧的一个窗口消费到聚焦列的底部。
    Mod+Comma  { consume-window-into-column; }
    // 将底部窗口从聚焦列排出到右侧。
    Mod+Period { expel-window-from-column; }

    Mod+R { switch-preset-column-width; }
    Mod+Shift+R { switch-preset-window-height; }
    Mod+Ctrl+R { reset-window-height; }
    Mod+F { maximize-column; }
    Mod+Shift+F { fullscreen-window; }
    F11 { fullscreen-window; }

    // 将聚焦的列扩展到其他完全可见列未占用的空间。
    // 使列"填充剩余空间"。
    Mod+Ctrl+F { expand-column-to-available-width; }

    Mod+C { center-column; }

    // 将屏幕上所有完全可见的列居中。
    Mod+Ctrl+C { center-visible-columns; }

    // 更精细的宽度调整。
    // 此命令还可以:
    // * 以像素设置宽度: "1000"
    // * 以像素调整宽度: "-5" 或 "+5"
    // * 以屏幕宽度百分比设置宽度: "25%"
    // * 以屏幕宽度百分比调整宽度: "-10%" 或 "+10%"
    // 像素大小使用逻辑或缩放像素。即在缩放为 2.0 的输出上，
    // set-column-width "100" 将使列占用 200 个物理屏幕像素。
    Mod+Minus { set-column-width "-10%"; }
    Mod+Equal { set-column-width "+10%"; }

    // 当在与其他窗口的列中时进行更精细的高度调整。
    Mod+Shift+Minus { set-window-height "-10%"; }
    Mod+Shift+Equal { set-window-height "+10%"; }

    // 在浮动和平铺布局之间移动聚焦的窗口。
    Mod+V       { toggle-window-floating; }
    Mod+Shift+V { switch-focus-between-floating-and-tiling; }

    // 切换选项卡式列显示模式。
    // 此列中的窗口将显示为垂直选项卡，而不是堆叠在彼此之上。
    Mod+W { toggle-column-tabbed-display; }

    // 切换布局的操作。
    // 注意: 如果您取消注释这些，请确保您在上面的 xkb 选项中没有匹配的布局切换热键。
    // 在同一个热键上同时拥有两者会破坏切换，因为它会在按下热键时切换两次（一次通过 xkb，一次通过 niri）。
    // Mod+Space       { switch-layout "next"; }
    // Mod+Shift+Space { switch-layout "prev"; }

    Print { screenshot; }
    Ctrl+Print { screenshot-screen; }
    Alt+Print { screenshot-window; }

    // 远程桌面客户端和软件 KVM 切换器等应用程序可能会请求 niri 停止处理此处定义的键盘快捷键，
    // 以便它们可以（例如）将按键原样转发到远程机器。
    // 绑定一个逃生快捷键来切换抑制器是个好主意，这样有问题的应用程序就不能控制您的会话。
    //
    // allow-inhibiting=false 属性也可以应用于其他绑定，这确保 niri 始终处理它们，即使抑制器处于活动状态。
    Mod+Escape allow-inhibiting=false { toggle-keyboard-shortcuts-inhibit; }

    // quit 操作将显示确认对话框以避免意外退出。
    Mod+Shift+E { quit; }
    Ctrl+Alt+Delete { quit; }

    // 关闭监视器。要重新打开它们，请进行任何输入，如移动鼠标或按任何其他键。
    Mod+Shift+P { power-off-monitors; }
}


// 取消注释此行以要求客户端尽可能省略其客户端装饰。
// 如果客户端专门请求 CSD，请求将被接受。
// 此外，客户端将被告知它们是平铺的，去除一些客户端圆角。
// 此选项还将修复一些半透明窗口后面的边框/焦点环绘制。
// 启用或禁用此选项后，您需要重新启动应用程序才能生效。
prefer-no-csd

// 您可以更改截图保存的路径。
// 前面的 ~ 将扩展为主目录。
// 路径使用 strftime(3) 格式化以提供截图日期和时间。
screenshot-path "~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"

// 您也可以将此设置为 null 以禁用将截图保存到磁盘。
// screenshot-path null

// 动画设置。
// wiki 解释了如何配置单个动画:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Animations
animations {
    // 取消注释以关闭所有动画。
    // off

    // 将所有动画减慢此倍数。小于 1 的值会加速它们。
    // slowdown 3.0
}

// 窗口规则让您调整单个窗口的行为。
// 在 wiki 上查找更多信息:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Window-Rules

// 通过设置空的 default-column-width 来解决 WezTerm 的初始配置错误。
window-rule {
    // 此正则表达式故意尽可能具体，
    // 因为这是默认配置，我们不希望误报。
    // 如果您愿意，可以使用 app-id="wezterm"。
    match app-id=r#"^org\.wezfurlong\.wezterm$"#
    default-column-width {}
}

// 默认将 Firefox 画中画播放器设置为浮动。
window-rule {
    // 此 app-id 正则表达式适用于:
    // - 主机 Firefox (app-id 是 "firefox")
    // - Flatpak Firefox (app-id 是 "org.mozilla.firefox")
    match app-id=r#"firefox$"# title="^Picture-in-Picture$"
    open-floating true
}

// 示例: 阻止两个密码管理器被屏幕录制。
// (此示例规则前面有 "/-" 注释掉。)
/-window-rule {
    match app-id=r#"^org\.keepassxc\.KeePassXC$"#
    match app-id=r#"^org\.gnome\.World\.Secrets$"#

    block-out-from "screen-capture"

    // 如果您希望它们在第三方截图工具中可见，请使用此选项。
    // block-out-from "screencast"
}

// 为所有窗口启用圆角。
window-rule {
    geometry-corner-radius 16
    clip-to-geometry true
}
